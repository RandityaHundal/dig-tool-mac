name: Build and Release (macOS Intel)

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'v1.0'
        required: true
        default: 'v1.0'
      release_name:
        description: 'v1.0'
        required: true
        default: 'release v1.0'
      release_notes:
        description: 'release notes'
        required: false
        default: 'compiled with PyInstaller'

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          architecture: 'x64'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Executable with PyInstaller
        run: |
          python compile.py

      - name: Sign Application
        run: |
          echo "${{ secrets.SIGNING_CERTIFICATE }}" > certificate.crt
          echo "${{ secrets.SIGNING_KEY }}" > private.key
          security create-keychain -p "" build.keychain
          security import certificate.crt -k build.keychain -T /usr/bin/codesign
          security import private.key -k build.keychain -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          codesign --force --deep --sign "DigTool" "dist/DigTool.app"
        shell: bash

      - name: Prepare for Release
        id: prepare_release
        run: |
          APP_NAME=$(basename dist/*.app)
          ZIP_NAME="${APP_NAME%.app}-intel.zip"
          zip -r "dist/$ZIP_NAME" "dist/$APP_NAME"
          echo "zip_path=dist/$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          release_name: ${{ github.event.inputs.release_name }}
          body: ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prepare_release.outputs.zip_path }}
          asset_name: ${{ steps.prepare_release.outputs.zip_name }}
          asset_content_type: application/zip