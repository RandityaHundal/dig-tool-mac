name: Build and Release (macOS Apple Silicon)

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'v1.0'
        required: true
        default: 'v1.0'
      release_name:
        description: 'v1.0'
        required: true
        default: 'release v1.0'
      release_notes:
        description: 'release notes'
        required: false
        default: 'compiled with PyInstaller'

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          architecture: 'arm64'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Executable with PyInstaller
        run: |
          python compile.py

      - name: Sign Application
        run: |
          # Decode the P12 file from the base64 secret
          echo "${{ secrets.SIGNING_P12_BASE64 }}" | base64 --decode > certificate.p12

          # Create a temporary keychain
          KEYCHAIN_PASSWORD="build-keychain-password"
          KEYCHAIN_PATH=build.keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import the P12 file into the keychain
          security import certificate.p12 -k "$KEYCHAIN_PATH" -P "${{ secrets.SIGNING_P12_PASSWORD }}" -T /usr/bin/codesign

          # Allow codesign to access the keychain without prompts
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Find the exact identity name from the keychain
          # We'll try to find it by grepping for the common name "DigTool"
          IDENTITY_NAME=$(security find-identity -v "$KEYCHAIN_PATH" | grep "DigTool" | head -n 1 | sed -e 's/^[[:space:]]*[0-9]) //g' -e 's/"$//g')

          echo "Extracted signing identity: '$IDENTITY_NAME'"
          if [ -z "$IDENTITY_NAME" ]; then
            echo "Error: Could not extract signing identity. Please ensure the common name in your certificate is 'DigTool' and that the certificate is correctly imported."
            exit 1
          fi

          echo "Signing app bundle at: dist/DigTool.app"

          # Sign the application using the found identity
          codesign --force --deep --sign "$IDENTITY_NAME" "dist/DigTool.app" --keychain "$KEYCHAIN_PATH"
        shell: bash

      - name: Prepare for Release
        id: prepare_release
        run: |
          APP_NAME=$(basename dist/*.app)
          ZIP_NAME="${APP_NAME%.app}-apple-silicon.zip"
          zip -r "dist/$ZIP_NAME" "dist/$APP_NAME"
          echo "zip_path=dist/$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          release_name: ${{ github.event.inputs.release_name }}
          body: ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prepare_release.outputs.zip_path }}
          asset_name: ${{ steps.prepare_release.outputs.zip_name }}
          asset_content_type: application/zip
